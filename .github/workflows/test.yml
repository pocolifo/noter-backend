name: Test

on:
  push:
    paths-ignore: '**.md'
  pull_request:
    paths-ignore: '**.md'

env:
  SQLALCHEMY_URL: postgresql://postgres:postgres@localhost:5432/postgres

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run unit tests
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres        
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # Wait for Postgres to start
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.10'
        
      - name: Set up project
        run: make init
      
      - name: Test
        run: make test
  
  sast:
    needs: test
    runs-on: ubuntu-latest
    name: SAST testing with PyCharm Security
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Run PyCharm Security
        uses: tonybaloney/pycharm-security@master
        with:
          path: backend/
          fail_on_warnings: yes
  
  dast:
    env:
      META_SERVER_PORT: 9000
      BACKEND_SERVER_PORT: 8000
      SQLALCHEMY_URL: postgresql://postgres:postgres@localhost:5432/postgres
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres        
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # Wait for Postgres to start
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    permissions: 
      security-events: write
      statuses: write
      issues: write
      actions: write
      checks: read
      contents: read
      deployments: read
    needs: test
    runs-on: ubuntu-latest
    name: DAST with ZAP API scan
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.10'
        
      - name: Set up project
        run: make init
      
      - uses: JarvusInnovations/background-action@v1
        name: Run backend in background
        with:
          run: make run
          wait-on: |
            http-get://127.0.0.1:${{ env.BACKEND_SERVER_PORT }}/
            http-get://127.0.0.1:${{ env.META_SERVER_PORT }}/access-flags
          tail: true  # monitor the progress live
          log-output-resume: stderr  # Eliminates previosuly output stderr log entries from post-run output
          wait-for: 1m  # timeout 1 minute
          log-output: stderr,stdout
          log-output-if: failure

      - name: Run ZAP API DAST Scan
        uses: zaproxy/action-api-scan@v0.4.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          format: openapi
          target: 'http://127.0.0.1:${{ env.BACKEND_SERVER_PORT }}/openapi.json'
          allow_issue_writing: true
          cmd_options: '-d'